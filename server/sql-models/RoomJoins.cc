/**
 *
 *  RoomJoins.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "RoomJoins.h"
#include <drogon/utils/Utilities.h>
#include <string>
#include "Rooms.h"
#include "Users.h"

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cavoke_orm;

const std::string RoomJoins::Cols::_room_id = "room_id";
const std::string RoomJoins::Cols::_user_id = "user_id";
const std::vector<std::string> RoomJoins::primaryKeyName = {"room_id",
                                                            "user_id"};
const bool RoomJoins::hasPrimaryKey = true;
const std::string RoomJoins::tableName = "room_joins";

const std::vector<typename RoomJoins::MetaData> RoomJoins::metaData_ = {
    {"room_id", "std::string", "uuid", 0, 0, 1, 1},
    {"user_id", "std::string", "character varying", 0, 0, 1, 1}};
const std::string &RoomJoins::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
RoomJoins::RoomJoins(const Row &r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["room_id"].isNull()) {
            roomId_ =
                std::make_shared<std::string>(r["room_id"].as<std::string>());
        }
        if (!r["user_id"].isNull()) {
            userId_ =
                std::make_shared<std::string>(r["user_id"].as<std::string>());
        }
    } else {
        size_t offset = (size_t)indexOffset;
        if (offset + 2 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            roomId_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            userId_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
    }
}

RoomJoins::RoomJoins(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 2) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            roomId_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[0]].asString());
        }
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            userId_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[1]].asString());
        }
    }
}

RoomJoins::RoomJoins(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("room_id")) {
        dirtyFlag_[0] = true;
        if (!pJson["room_id"].isNull()) {
            roomId_ =
                std::make_shared<std::string>(pJson["room_id"].asString());
        }
    }
    if (pJson.isMember("user_id")) {
        dirtyFlag_[1] = true;
        if (!pJson["user_id"].isNull()) {
            userId_ =
                std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
}

void RoomJoins::updateByMasqueradedJson(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 2) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            roomId_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[0]].asString());
        }
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1])) {
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            userId_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void RoomJoins::updateByJson(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("room_id")) {
        if (!pJson["room_id"].isNull()) {
            roomId_ =
                std::make_shared<std::string>(pJson["room_id"].asString());
        }
    }
    if (pJson.isMember("user_id")) {
        if (!pJson["user_id"].isNull()) {
            userId_ =
                std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
}

const std::string &RoomJoins::getValueOfRoomId() const noexcept {
    const static std::string defaultValue = std::string();
    if (roomId_)
        return *roomId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &RoomJoins::getRoomId() const noexcept {
    return roomId_;
}
void RoomJoins::setRoomId(const std::string &pRoomId) noexcept {
    roomId_ = std::make_shared<std::string>(pRoomId);
    dirtyFlag_[0] = true;
}
void RoomJoins::setRoomId(std::string &&pRoomId) noexcept {
    roomId_ = std::make_shared<std::string>(std::move(pRoomId));
    dirtyFlag_[0] = true;
}

const std::string &RoomJoins::getValueOfUserId() const noexcept {
    const static std::string defaultValue = std::string();
    if (userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &RoomJoins::getUserId() const noexcept {
    return userId_;
}
void RoomJoins::setUserId(const std::string &pUserId) noexcept {
    userId_ = std::make_shared<std::string>(pUserId);
    dirtyFlag_[1] = true;
}
void RoomJoins::setUserId(std::string &&pUserId) noexcept {
    userId_ = std::make_shared<std::string>(std::move(pUserId));
    dirtyFlag_[1] = true;
}

void RoomJoins::updateId(const uint64_t id) {
}
typename RoomJoins::PrimaryKeyType RoomJoins::getPrimaryKey() const {
    return std::make_tuple(*roomId_, *userId_);
}

const std::vector<std::string> &RoomJoins::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {"room_id", "user_id"};
    return inCols;
}

void RoomJoins::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[0]) {
        if (getRoomId()) {
            binder << getValueOfRoomId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[1]) {
        if (getUserId()) {
            binder << getValueOfUserId();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> RoomJoins::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[0]) {
        ret.push_back(getColumnName(0));
    }
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void RoomJoins::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[0]) {
        if (getRoomId()) {
            binder << getValueOfRoomId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[1]) {
        if (getUserId()) {
            binder << getValueOfUserId();
        } else {
            binder << nullptr;
        }
    }
}
Json::Value RoomJoins::toJson() const {
    Json::Value ret;
    if (getRoomId()) {
        ret["room_id"] = getValueOfRoomId();
    } else {
        ret["room_id"] = Json::Value();
    }
    if (getUserId()) {
        ret["user_id"] = getValueOfUserId();
    } else {
        ret["user_id"] = Json::Value();
    }
    return ret;
}

Json::Value RoomJoins::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 2) {
        if (!pMasqueradingVector[0].empty()) {
            if (getRoomId()) {
                ret[pMasqueradingVector[0]] = getValueOfRoomId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getUserId()) {
                ret[pMasqueradingVector[1]] = getValueOfUserId();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getRoomId()) {
        ret["room_id"] = getValueOfRoomId();
    } else {
        ret["room_id"] = Json::Value();
    }
    if (getUserId()) {
        ret["user_id"] = getValueOfUserId();
    } else {
        ret["user_id"] = Json::Value();
    }
    return ret;
}

bool RoomJoins::validateJsonForCreation(const Json::Value &pJson,
                                        std::string &err) {
    if (pJson.isMember("room_id")) {
        if (!validJsonOfField(0, "room_id", pJson["room_id"], err, true))
            return false;
    } else {
        err = "The room_id column cannot be null";
        return false;
    }
    if (pJson.isMember("user_id")) {
        if (!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    } else {
        err = "The user_id column cannot be null";
        return false;
    }
    return true;
}
bool RoomJoins::validateMasqueradedJsonForCreation(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector,
    std::string &err) {
    if (pMasqueradingVector.size() != 2) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0],
                                      pJson[pMasqueradingVector[0]], err, true))
                    return false;
            } else {
                err =
                    "The " + pMasqueradingVector[0] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1],
                                      pJson[pMasqueradingVector[1]], err, true))
                    return false;
            } else {
                err =
                    "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
    } catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}
bool RoomJoins::validateJsonForUpdate(const Json::Value &pJson,
                                      std::string &err) {
    if (pJson.isMember("room_id")) {
        if (!validJsonOfField(0, "room_id", pJson["room_id"], err, false))
            return false;
    } else {
        err =
            "The value of primary key must be set in the json object for "
            "update";
        return false;
    }
    if (pJson.isMember("user_id")) {
        if (!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    } else {
        err =
            "The value of primary key must be set in the json object for "
            "update";
        return false;
    }
    return true;
}
bool RoomJoins::validateMasqueradedJsonForUpdate(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector,
    std::string &err) {
    if (pMasqueradingVector.size() != 2) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() &&
            pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0],
                                  pJson[pMasqueradingVector[0]], err, false))
                return false;
        } else {
            err =
                "The value of primary key must be set in the json object for "
                "update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() &&
            pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1],
                                  pJson[pMasqueradingVector[1]], err, false))
                return false;
        } else {
            err =
                "The value of primary key must be set in the json object for "
                "update";
            return false;
        }
    } catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}
bool RoomJoins::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
void RoomJoins::getRoom(const DbClientPtr &clientPtr,
                        const std::function<void(Rooms)> &rcb,
                        const ExceptionCallback &ecb) const {
    const static std::string sql = "select * from rooms where id = $1";
    *clientPtr << sql << *roomId_ >> [rcb = std::move(rcb),
                                      ecb](const Result &r) {
        if (r.size() == 0) {
            ecb(UnexpectedRows("0 rows found"));
        } else if (r.size() > 1) {
            ecb(UnexpectedRows("Found more than one row"));
        } else {
            rcb(Rooms(r[0]));
        }
    } >> ecb;
}
void RoomJoins::getUser(const DbClientPtr &clientPtr,
                        const std::function<void(Users)> &rcb,
                        const ExceptionCallback &ecb) const {
    const static std::string sql = "select * from users where id = $1";
    *clientPtr << sql << *userId_ >> [rcb = std::move(rcb),
                                      ecb](const Result &r) {
        if (r.size() == 0) {
            ecb(UnexpectedRows("0 rows found"));
        } else if (r.size() > 1) {
            ecb(UnexpectedRows("Found more than one row"));
        } else {
            rcb(Users(r[0]));
        }
    } >> ecb;
}

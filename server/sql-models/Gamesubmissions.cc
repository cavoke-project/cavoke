/**
 *
 *  Gamesubmissions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Gamesubmissions.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cavoke;

const std::string Gamesubmissions::Cols::_id = "id";
const std::string Gamesubmissions::Cols::_game_id = "game_id";
const std::string Gamesubmissions::Cols::_package_type = "package_type";
const std::string Gamesubmissions::Cols::_git_repo = "git_repo";
const std::string Gamesubmissions::Cols::_review_status = "review_status";
const std::string Gamesubmissions::Cols::_submitted_at = "submitted_at";
const std::string Gamesubmissions::Cols::_display_name = "display_name";
const std::string Gamesubmissions::primaryKeyName = "id";
const bool Gamesubmissions::hasPrimaryKey = true;
const std::string Gamesubmissions::tableName = "gamesubmissions";

const std::vector<typename Gamesubmissions::MetaData> Gamesubmissions::metaData_={
{"id","std::string","uuid",0,0,1,1},
{"game_id","std::string","character varying",0,0,0,0},
{"package_type","std::string","character varying",0,0,0,0},
{"git_repo","std::string","character varying",0,0,0,0},
{"review_status","int32_t","integer",4,0,0,0},
{"submitted_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"display_name","std::string","character varying",0,0,0,0}
};
const std::string &Gamesubmissions::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Gamesubmissions::Gamesubmissions(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["game_id"].isNull())
        {
            gameId_=std::make_shared<std::string>(r["game_id"].as<std::string>());
        }
        if(!r["package_type"].isNull())
        {
            packageType_=std::make_shared<std::string>(r["package_type"].as<std::string>());
        }
        if(!r["git_repo"].isNull())
        {
            gitRepo_=std::make_shared<std::string>(r["git_repo"].as<std::string>());
        }
        if(!r["review_status"].isNull())
        {
            reviewStatus_=std::make_shared<int32_t>(r["review_status"].as<int32_t>());
        }
        if(!r["submitted_at"].isNull())
        {
            auto timeStr = r["submitted_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                submittedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["display_name"].isNull())
        {
            displayName_=std::make_shared<std::string>(r["display_name"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            gameId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            packageType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            gitRepo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            reviewStatus_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                submittedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            displayName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Gamesubmissions::Gamesubmissions(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            gameId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            packageType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            gitRepo_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            reviewStatus_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                submittedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

Gamesubmissions::Gamesubmissions(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("game_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["game_id"].isNull())
        {
            gameId_=std::make_shared<std::string>(pJson["game_id"].asString());
        }
    }
    if(pJson.isMember("package_type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["package_type"].isNull())
        {
            packageType_=std::make_shared<std::string>(pJson["package_type"].asString());
        }
    }
    if(pJson.isMember("git_repo"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["git_repo"].isNull())
        {
            gitRepo_=std::make_shared<std::string>(pJson["git_repo"].asString());
        }
    }
    if(pJson.isMember("review_status"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["review_status"].isNull())
        {
            reviewStatus_=std::make_shared<int32_t>((int32_t)pJson["review_status"].asInt64());
        }
    }
    if(pJson.isMember("submitted_at"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["submitted_at"].isNull())
        {
            auto timeStr = pJson["submitted_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                submittedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("display_name"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["display_name"].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson["display_name"].asString());
        }
    }
}

void Gamesubmissions::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            gameId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            packageType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            gitRepo_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            reviewStatus_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                submittedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void Gamesubmissions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("game_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["game_id"].isNull())
        {
            gameId_=std::make_shared<std::string>(pJson["game_id"].asString());
        }
    }
    if(pJson.isMember("package_type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["package_type"].isNull())
        {
            packageType_=std::make_shared<std::string>(pJson["package_type"].asString());
        }
    }
    if(pJson.isMember("git_repo"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["git_repo"].isNull())
        {
            gitRepo_=std::make_shared<std::string>(pJson["git_repo"].asString());
        }
    }
    if(pJson.isMember("review_status"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["review_status"].isNull())
        {
            reviewStatus_=std::make_shared<int32_t>((int32_t)pJson["review_status"].asInt64());
        }
    }
    if(pJson.isMember("submitted_at"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["submitted_at"].isNull())
        {
            auto timeStr = pJson["submitted_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                submittedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("display_name"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["display_name"].isNull())
        {
            displayName_=std::make_shared<std::string>(pJson["display_name"].asString());
        }
    }
}

const std::string &Gamesubmissions::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Gamesubmissions::getId() const noexcept
{
    return id_;
}
void Gamesubmissions::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Gamesubmissions::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Gamesubmissions::PrimaryKeyType & Gamesubmissions::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Gamesubmissions::getValueOfGameId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(gameId_)
        return *gameId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Gamesubmissions::getGameId() const noexcept
{
    return gameId_;
}
void Gamesubmissions::setGameId(const std::string &pGameId) noexcept
{
    gameId_ = std::make_shared<std::string>(pGameId);
    dirtyFlag_[1] = true;
}
void Gamesubmissions::setGameId(std::string &&pGameId) noexcept
{
    gameId_ = std::make_shared<std::string>(std::move(pGameId));
    dirtyFlag_[1] = true;
}
void Gamesubmissions::setGameIdToNull() noexcept
{
    gameId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Gamesubmissions::getValueOfPackageType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(packageType_)
        return *packageType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Gamesubmissions::getPackageType() const noexcept
{
    return packageType_;
}
void Gamesubmissions::setPackageType(const std::string &pPackageType) noexcept
{
    packageType_ = std::make_shared<std::string>(pPackageType);
    dirtyFlag_[2] = true;
}
void Gamesubmissions::setPackageType(std::string &&pPackageType) noexcept
{
    packageType_ = std::make_shared<std::string>(std::move(pPackageType));
    dirtyFlag_[2] = true;
}
void Gamesubmissions::setPackageTypeToNull() noexcept
{
    packageType_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Gamesubmissions::getValueOfGitRepo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(gitRepo_)
        return *gitRepo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Gamesubmissions::getGitRepo() const noexcept
{
    return gitRepo_;
}
void Gamesubmissions::setGitRepo(const std::string &pGitRepo) noexcept
{
    gitRepo_ = std::make_shared<std::string>(pGitRepo);
    dirtyFlag_[3] = true;
}
void Gamesubmissions::setGitRepo(std::string &&pGitRepo) noexcept
{
    gitRepo_ = std::make_shared<std::string>(std::move(pGitRepo));
    dirtyFlag_[3] = true;
}
void Gamesubmissions::setGitRepoToNull() noexcept
{
    gitRepo_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &Gamesubmissions::getValueOfReviewStatus() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(reviewStatus_)
        return *reviewStatus_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Gamesubmissions::getReviewStatus() const noexcept
{
    return reviewStatus_;
}
void Gamesubmissions::setReviewStatus(const int32_t &pReviewStatus) noexcept
{
    reviewStatus_ = std::make_shared<int32_t>(pReviewStatus);
    dirtyFlag_[4] = true;
}
void Gamesubmissions::setReviewStatusToNull() noexcept
{
    reviewStatus_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Gamesubmissions::getValueOfSubmittedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(submittedAt_)
        return *submittedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Gamesubmissions::getSubmittedAt() const noexcept
{
    return submittedAt_;
}
void Gamesubmissions::setSubmittedAt(const ::trantor::Date &pSubmittedAt) noexcept
{
    submittedAt_ = std::make_shared<::trantor::Date>(pSubmittedAt);
    dirtyFlag_[5] = true;
}
void Gamesubmissions::setSubmittedAtToNull() noexcept
{
    submittedAt_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Gamesubmissions::getValueOfDisplayName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(displayName_)
        return *displayName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Gamesubmissions::getDisplayName() const noexcept
{
    return displayName_;
}
void Gamesubmissions::setDisplayName(const std::string &pDisplayName) noexcept
{
    displayName_ = std::make_shared<std::string>(pDisplayName);
    dirtyFlag_[6] = true;
}
void Gamesubmissions::setDisplayName(std::string &&pDisplayName) noexcept
{
    displayName_ = std::make_shared<std::string>(std::move(pDisplayName));
    dirtyFlag_[6] = true;
}
void Gamesubmissions::setDisplayNameToNull() noexcept
{
    displayName_.reset();
    dirtyFlag_[6] = true;
}

void Gamesubmissions::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Gamesubmissions::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "game_id",
        "package_type",
        "git_repo",
        "review_status",
        "submitted_at",
        "display_name"
    };
    return inCols;
}

void Gamesubmissions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getGameId())
        {
            binder << getValueOfGameId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPackageType())
        {
            binder << getValueOfPackageType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGitRepo())
        {
            binder << getValueOfGitRepo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getReviewStatus())
        {
            binder << getValueOfReviewStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSubmittedAt())
        {
            binder << getValueOfSubmittedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDisplayName())
        {
            binder << getValueOfDisplayName();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Gamesubmissions::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Gamesubmissions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getGameId())
        {
            binder << getValueOfGameId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPackageType())
        {
            binder << getValueOfPackageType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGitRepo())
        {
            binder << getValueOfGitRepo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getReviewStatus())
        {
            binder << getValueOfReviewStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSubmittedAt())
        {
            binder << getValueOfSubmittedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDisplayName())
        {
            binder << getValueOfDisplayName();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Gamesubmissions::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getGameId())
    {
        ret["game_id"]=getValueOfGameId();
    }
    else
    {
        ret["game_id"]=Json::Value();
    }
    if(getPackageType())
    {
        ret["package_type"]=getValueOfPackageType();
    }
    else
    {
        ret["package_type"]=Json::Value();
    }
    if(getGitRepo())
    {
        ret["git_repo"]=getValueOfGitRepo();
    }
    else
    {
        ret["git_repo"]=Json::Value();
    }
    if(getReviewStatus())
    {
        ret["review_status"]=getValueOfReviewStatus();
    }
    else
    {
        ret["review_status"]=Json::Value();
    }
    if(getSubmittedAt())
    {
        ret["submitted_at"]=getSubmittedAt()->toDbStringLocal();
    }
    else
    {
        ret["submitted_at"]=Json::Value();
    }
    if(getDisplayName())
    {
        ret["display_name"]=getValueOfDisplayName();
    }
    else
    {
        ret["display_name"]=Json::Value();
    }
    return ret;
}

Json::Value Gamesubmissions::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getGameId())
            {
                ret[pMasqueradingVector[1]]=getValueOfGameId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPackageType())
            {
                ret[pMasqueradingVector[2]]=getValueOfPackageType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getGitRepo())
            {
                ret[pMasqueradingVector[3]]=getValueOfGitRepo();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getReviewStatus())
            {
                ret[pMasqueradingVector[4]]=getValueOfReviewStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSubmittedAt())
            {
                ret[pMasqueradingVector[5]]=getSubmittedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDisplayName())
            {
                ret[pMasqueradingVector[6]]=getValueOfDisplayName();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getGameId())
    {
        ret["game_id"]=getValueOfGameId();
    }
    else
    {
        ret["game_id"]=Json::Value();
    }
    if(getPackageType())
    {
        ret["package_type"]=getValueOfPackageType();
    }
    else
    {
        ret["package_type"]=Json::Value();
    }
    if(getGitRepo())
    {
        ret["git_repo"]=getValueOfGitRepo();
    }
    else
    {
        ret["git_repo"]=Json::Value();
    }
    if(getReviewStatus())
    {
        ret["review_status"]=getValueOfReviewStatus();
    }
    else
    {
        ret["review_status"]=Json::Value();
    }
    if(getSubmittedAt())
    {
        ret["submitted_at"]=getSubmittedAt()->toDbStringLocal();
    }
    else
    {
        ret["submitted_at"]=Json::Value();
    }
    if(getDisplayName())
    {
        ret["display_name"]=getValueOfDisplayName();
    }
    else
    {
        ret["display_name"]=Json::Value();
    }
    return ret;
}

bool Gamesubmissions::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("game_id"))
    {
        if(!validJsonOfField(1, "game_id", pJson["game_id"], err, true))
            return false;
    }
    if(pJson.isMember("package_type"))
    {
        if(!validJsonOfField(2, "package_type", pJson["package_type"], err, true))
            return false;
    }
    if(pJson.isMember("git_repo"))
    {
        if(!validJsonOfField(3, "git_repo", pJson["git_repo"], err, true))
            return false;
    }
    if(pJson.isMember("review_status"))
    {
        if(!validJsonOfField(4, "review_status", pJson["review_status"], err, true))
            return false;
    }
    if(pJson.isMember("submitted_at"))
    {
        if(!validJsonOfField(5, "submitted_at", pJson["submitted_at"], err, true))
            return false;
    }
    if(pJson.isMember("display_name"))
    {
        if(!validJsonOfField(6, "display_name", pJson["display_name"], err, true))
            return false;
    }
    return true;
}
bool Gamesubmissions::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Gamesubmissions::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("game_id"))
    {
        if(!validJsonOfField(1, "game_id", pJson["game_id"], err, false))
            return false;
    }
    if(pJson.isMember("package_type"))
    {
        if(!validJsonOfField(2, "package_type", pJson["package_type"], err, false))
            return false;
    }
    if(pJson.isMember("git_repo"))
    {
        if(!validJsonOfField(3, "git_repo", pJson["git_repo"], err, false))
            return false;
    }
    if(pJson.isMember("review_status"))
    {
        if(!validJsonOfField(4, "review_status", pJson["review_status"], err, false))
            return false;
    }
    if(pJson.isMember("submitted_at"))
    {
        if(!validJsonOfField(5, "submitted_at", pJson["submitted_at"], err, false))
            return false;
    }
    if(pJson.isMember("display_name"))
    {
        if(!validJsonOfField(6, "display_name", pJson["display_name"], err, false))
            return false;
    }
    return true;
}
bool Gamesubmissions::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Gamesubmissions::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson,
                                       std::string &err,
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}

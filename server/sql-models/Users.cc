/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>
#include "Players.h"
#include "RoomJoins.h"

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres_db;

const std::string Users::Cols::_id = "id";
const std::string Users::Cols::_display_name = "display_name";
const std::string Users::primaryKeyName = "id";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "users";

const std::vector<typename Users::MetaData> Users::metaData_ = {
    {"id", "std::string", "character varying", 0, 0, 1, 1},
    {"display_name", "std::string", "character varying", 0, 0, 0, 0}};
const std::string &Users::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Users::Users(const Row &r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["id"].isNull()) {
            id_ = std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if (!r["display_name"].isNull()) {
            displayName_ = std::make_shared<std::string>(
                r["display_name"].as<std::string>());
        }
    } else {
        size_t offset = (size_t)indexOffset;
        if (offset + 2 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            id_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            displayName_ =
                std::make_shared<std::string>(r[index].as<std::string>());
        }
    }
}

Users::Users(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 2) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            id_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[0]].asString());
        }
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            displayName_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[1]].asString());
        }
    }
}

Users::Users(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("id")) {
        dirtyFlag_[0] = true;
        if (!pJson["id"].isNull()) {
            id_ = std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if (pJson.isMember("display_name")) {
        dirtyFlag_[1] = true;
        if (!pJson["display_name"].isNull()) {
            displayName_ =
                std::make_shared<std::string>(pJson["display_name"].asString());
        }
    }
}

void Users::updateByMasqueradedJson(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 2) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            id_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[0]].asString());
        }
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            displayName_ = std::make_shared<std::string>(
                pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void Users::updateByJson(const Json::Value &pJson) noexcept(false) {
    if (pJson.isMember("id")) {
        if (!pJson["id"].isNull()) {
            id_ = std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if (pJson.isMember("display_name")) {
        dirtyFlag_[1] = true;
        if (!pJson["display_name"].isNull()) {
            displayName_ =
                std::make_shared<std::string>(pJson["display_name"].asString());
        }
    }
}

const std::string &Users::getValueOfId() const noexcept {
    const static std::string defaultValue = std::string();
    if (id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getId() const noexcept {
    return id_;
}
void Users::setId(const std::string &pId) noexcept {
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Users::setId(std::string &&pId) noexcept {
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Users::PrimaryKeyType &Users::getPrimaryKey() const {
    assert(id_);
    return *id_;
}

const std::string &Users::getValueOfDisplayName() const noexcept {
    const static std::string defaultValue = std::string();
    if (displayName_)
        return *displayName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getDisplayName() const noexcept {
    return displayName_;
}
void Users::setDisplayName(const std::string &pDisplayName) noexcept {
    displayName_ = std::make_shared<std::string>(pDisplayName);
    dirtyFlag_[1] = true;
}
void Users::setDisplayName(std::string &&pDisplayName) noexcept {
    displayName_ = std::make_shared<std::string>(std::move(pDisplayName));
    dirtyFlag_[1] = true;
}
void Users::setDisplayNameToNull() noexcept {
    displayName_.reset();
    dirtyFlag_[1] = true;
}

void Users::updateId(const uint64_t id) {
}

const std::vector<std::string> &Users::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {"id", "display_name"};
    return inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[0]) {
        if (getId()) {
            binder << getValueOfId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[1]) {
        if (getDisplayName()) {
            binder << getValueOfDisplayName();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Users::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[0]) {
        ret.push_back(getColumnName(0));
    }
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
    if (dirtyFlag_[0]) {
        if (getId()) {
            binder << getValueOfId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[1]) {
        if (getDisplayName()) {
            binder << getValueOfDisplayName();
        } else {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const {
    Json::Value ret;
    if (getId()) {
        ret["id"] = getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getDisplayName()) {
        ret["display_name"] = getValueOfDisplayName();
    } else {
        ret["display_name"] = Json::Value();
    }
    return ret;
}

Json::Value Users::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 2) {
        if (!pMasqueradingVector[0].empty()) {
            if (getId()) {
                ret[pMasqueradingVector[0]] = getValueOfId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getDisplayName()) {
                ret[pMasqueradingVector[1]] = getValueOfDisplayName();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId()) {
        ret["id"] = getValueOfId();
    } else {
        ret["id"] = Json::Value();
    }
    if (getDisplayName()) {
        ret["display_name"] = getValueOfDisplayName();
    } else {
        ret["display_name"] = Json::Value();
    }
    return ret;
}

bool Users::validateJsonForCreation(const Json::Value &pJson,
                                    std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    } else {
        err = "The id column cannot be null";
        return false;
    }
    if (pJson.isMember("display_name")) {
        if (!validJsonOfField(1, "display_name", pJson["display_name"], err,
                              true))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForCreation(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector,
    std::string &err) {
    if (pMasqueradingVector.size() != 2) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0],
                                      pJson[pMasqueradingVector[0]], err, true))
                    return false;
            } else {
                err =
                    "The " + pMasqueradingVector[0] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1],
                                      pJson[pMasqueradingVector[1]], err, true))
                    return false;
            }
        }
    } catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Users::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
    if (pJson.isMember("id")) {
        if (!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    } else {
        err =
            "The value of primary key must be set in the json object for "
            "update";
        return false;
    }
    if (pJson.isMember("display_name")) {
        if (!validJsonOfField(1, "display_name", pJson["display_name"], err,
                              false))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForUpdate(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector,
    std::string &err) {
    if (pMasqueradingVector.size() != 2) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() &&
            pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0],
                                  pJson[pMasqueradingVector[0]], err, false))
                return false;
        } else {
            err =
                "The value of primary key must be set in the json object for "
                "update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() &&
            pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1],
                                  pJson[pMasqueradingVector[1]], err, false))
                return false;
        }
    } catch (const Json::LogicError &e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Users::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation) {
    switch (index) {
        case 0:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
            break;
    }
    return true;
}
void Users::getPlayers(const DbClientPtr &clientPtr,
                       const std::function<void(std::vector<Players>)> &rcb,
                       const ExceptionCallback &ecb) const {
    const static std::string sql = "select * from players where user_id = $1";
    *clientPtr << sql << *id_ >> [rcb = std::move(rcb)](const Result &r) {
        std::vector<Players> ret;
        ret.reserve(r.size());
        for (auto const &row : r) {
            ret.emplace_back(Players(row));
        }
        rcb(ret);
    } >> ecb;
}
void Users::getRoomJoins(const DbClientPtr &clientPtr,
                         const std::function<void(std::vector<RoomJoins>)> &rcb,
                         const ExceptionCallback &ecb) const {
    const static std::string sql =
        "select * from room_joins where user_id = $1";
    *clientPtr << sql << *id_ >> [rcb = std::move(rcb)](const Result &r) {
        std::vector<RoomJoins> ret;
        ret.reserve(r.size());
        for (auto const &row : r) {
            ret.emplace_back(RoomJoins(row));
        }
        rcb(ret);
    } >> ecb;
}
